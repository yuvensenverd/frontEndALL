{"version":3,"sources":["logo.svg","component/header.jsx","App.js","action/countaction.js","serviceWorker.js","reducer/countreducer.js","reducer/index.js","index.js"],"names":["module","exports","__webpack_require__","p","headers","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","harga","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","React","Component","connect","total","biaya","App","mobilOrMotor","hitungParkir","jenis","console","log","hasil","refs","mobiljam","value","hitungBiaya","motorjam","printInputParkir","kendaraan","arguments","length","undefined","_this2","mobil","type","ref","motor","header","payload","Boolean","window","location","hostname","match","INITIAL_STATE","combineReducers","action","objectSpread","reduxbiaya","createStore","Reducer","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d96d3aae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem } from 'reactstrap';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass headers extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink >Redux</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink >{this.props.harga}</NavLink>\r\n              </NavItem>\r\n              <UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                  Options\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                  <DropdownItem>\r\n                    Option 1\r\n                  </DropdownItem>\r\n                  <DropdownItem>\r\n                    Option 2\r\n                  </DropdownItem>\r\n                  <DropdownItem divider />\r\n                  <DropdownItem>\r\n                    Reset\r\n                  </DropdownItem>\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => { \r\n  return {\r\n    harga : state.total.biaya\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(headers)\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './component/header'\nimport { connect } from 'react-redux'\nimport { hitungBiaya } from './action/countaction'\n\nclass App extends React.Component {\n  state = {\n    mobilOrMotor : 0,\n  }\n\n  // HITUNG PARKIR\n  hitungParkir = (jenis) => {\n    console.log(jenis)\n    if(jenis == \"mobil\"){\n      var totaljam = this.refs.mobiljam.value\n      var hasil = totaljam * 4000\n      this.props.hitungBiaya(hasil)\n    }else if(jenis == \"motor\"){\n      var totaljam = this.refs.motorjam.value\n      var hasil = totaljam * 2000\n      this.props.hitungBiaya(hasil)\n    }\n  }\n\n  // PRINT INPUT \n  printInputParkir = (kendaraan=\"a\") => {\n    if(kendaraan == \"mobil\"){\n      // var output = `\n      // <input type=\"number\" ref=\"mobiljam\" innerRef=\"innermobiljam\"/>\n      //  <p> Parkir Mobil Rp 4000/Jam </p> \n      // <input className=\"btn btn-success\" type=\"button\" value=\"Hitung\" onClick=\"${() => this.hitungParkir(\"mobil\")}\"/>\n       \n      return (\n        // // aisjdiaj sdia\n        // document.getElementsByTagName(\"h1\")[1].innerHTML= output\n        \n        this.setState({mobilOrMotor : 1})// MOBIL\n        \n      )\n    }else if(kendaraan == \"motor\"){\n      return(\n        // document.getElementsByTagName(\"h1\")[1].innerHTML=`\n        // <input type=\"number\" ref=\"motorjam\" innerRef=\"innermotorjam\"/>\n        //  <p> Parkir Motor Rp 2000/Jam </p>\n        // <input className=\"btn btn-success\" type=\"button\" value=\"Hitung\" onClick=\"${() => this.hitungParkir(\"motor\")}\"/>\n        //  `\n        this.setState({mobilOrMotor : 2}) // MOTOR\n\n      )\n    }else{\n  \n    }\n  }\n  render(){\n  const mobil = (\n    <div>\n      <input type=\"number\" ref=\"mobiljam\"/>\n      <p> Parkir Mobil Rp 4000/Jam </p> \n      <input className=\"btn btn-success\" type=\"button\" value=\"Hitung\" onClick={() => this.hitungParkir(\"mobil\")}/>\n    </div>\n  )\n  const motor = (\n    <div>\n      <input type=\"number\" ref=\"motorjam\"/>\n      <p> Parkir Motor Rp 2000/Jam </p>\n      <input className=\"btn btn-success\" type=\"button\" value=\"Hitung\" onClick={() => this.hitungParkir(\"motor\")} />\n    </div>\n  )\n  return (\n    <div>\n      <Header></Header>\n      <br></br>\n      <div className = 'justify-content-center'>\n        <center>\n      <h1> Aplikasi Parkir </h1>\n      <br></br>\n      <h3>Pilih Kendaraan</h3>\n      <br></br>\n            <input className=\"btn btn-primary ml-5 mr-5\" type=\"button\" value=\"Mobil\" onClick={() => this.printInputParkir(\"mobil\")}></input>\n            <input className=\"btn btn-primary ml-5 mr-5\" type=\"button\" value=\"Motor\" onClick={() => this.printInputParkir(\"motor\")}></input> \n            </center>\n     </div>\n     <center>\n       <br></br>\n       <h1>{this.state.mobilOrMotor === 1 \n        ? \n        mobil\n        : \n        this.state.mobilOrMotor == 2 \n        ?\n        motor \n        : \n        null}  \n        </h1>\n       <div className=\"mt-5 pt-5\">\n         <h2> {this.props.harga === 0\n         ?\n         null\n         :\n         this.props.harga >0\n         ?\n         \"Total harga Rp \" + this.props.harga\n         :\n         null\n        }\n      </h2>\n      </div>\n     </center>\n    </div>\n  );\n}\n}\n\nconst mapStateToProps = (state) => { \n  return {\n    harga : state.total.biaya\n  }\n}\n\nexport default connect(mapStateToProps,{hitungBiaya}) (App);\n","export const hitungBiaya = (hasil) => {\r\n    return{\r\n        type : 'HITUNG',\r\n        payload : hasil\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {biaya : 0 }\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n        case 'HITUNG' :\r\n            return {...state, biaya : action.payload}\r\n        default : \r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport countreducer from './countreducer'\r\n\r\nexport default combineReducers({\r\n    total : countreducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux'\nimport Reducer from './reducer/index'\nimport { createStore } from 'redux'\n\n\n\nconst reduxbiaya = createStore(Reducer)\n\n\nReactDOM.render( <Provider store ={reduxbiaya}>\n        <App/> \n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}